
#user  nobody;
# 配置和 CPU 核心数一样, worker 和 CPU 核心绑定, 减少 CPU 缓存失效
worker_processes                auto;
worker_priority                 -20; # 5ms - 800ms

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    # 每个 connecttion 都会对应一个读事件 和 一个写事件
    # client + upstream server 都会占用连接
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # $remote_addr  #记录访问网站的客户端地址
    # $remote_user  #远程客户端用户名
    # $time_local  #记录访问时间与时区
    # $request  #用户的http请求起始行信息
    # $status  #http状态码, 记录请求返回的状态码, 例如：200、301、404等
    # $body_bytes_sent  #服务器发送给客户端的响应body字节数
    # $http_referer  #记录此次请求是从哪个连接访问过来的, 可以根据该参数进行防盗链设置。
    # $http_user_agent  #记录客户端访问信息, 例如：浏览器、手机客户端等
    # $http_x_forwarded_for  #当前端有代理服务器时, 设置web节点记录客户端地址的配置, 此参数生效的前提是代理服务器也要进行相关的x_forwarded_for设置

     log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # access_log  logs/access.log  main;
    sendfile        on;
    # tcp_nopush     on;

    # 对指定浏览器不启用
    keepalive_disable msie;
    # 一个 tcp 最多处理的请求书
    keepalive_requests 100;
    # 浏览器75s没有请求则关闭 keepalive; 这个链接浏览器要保留10s
    keepalive_timeout  75s 10s;

    gzip  on;
    # 小于 2k 就尽量不要压缩
    gzip_min_length 2k;
    # 1~10 压缩的级别
    gzip_comp_level 2;
    # 只对以下文件压缩: text/html 是默认值
    gzip_types text/html text/plain application/x-javascript text/css application/xml

    upstream LOAD_BALANCE_SERVER_NAME {
        # fair
        ip_hash;                                        # 此时下面的 weight 会失效, 即使 server 宕机还是会转发到宕机的 server
        # hash user_$arg_username [consistent];                      # uri 中参数 username
        server 101.132.45.28:8080 weight=10;
        server 101.37.174.197:8080 weight=1 [down];     # [down] 表示不参与

        # keepalive 的连接数
        keepalive 32;
        # 一个 tcp 最多处理的请求书
        keepalive_requests 100;
        # 浏览器75s没有请求则关闭 keepalive
        keepalive_timeout  75s;
    }

    # 4 layer proxy of tcp
    server {
        listen                          80 protocol;
        server_name                     tcp.hubby.top;

        root                            html/;
        error_log                       logs/limiterror.log info;

        # 会在 tcp 层加地址
        proxy_protocol                  on;
    }

    # 4 layer proxy of udp
    server {
        listen                          80 udp;
        server_name                     udp.hubby.top;

        root                            html/;
        error_log                       logs/limiterror.log info;

        # session 接受几次请求则关闭
        proxy_reequests                 1;
        proxy_responses                 2;
        proxy_timeout                   2s;
    }

    # limit conn module config
    limit_conn_zone $binary_remote_addr zone=addr: 10m;
    server {
        server_name                     limit.hubby.top;

        root                            html/;
        error_log                       logs/limiterror.log info;

        location /limit {
            limit_conn_status           500;
            limit_conn_log_level        warn;
            limit_rate                  50;
            limit_conn                  addr 1;
        }
    }

    # limit req module config
    limit_conn_zone $binary_remote_addr zone=addr:10m rate=2r/m;
    server {
        server_name                     limit.hubby.top;

        root                            html/;
        error_log                       logs/limiterror.log info;

        location /limit {
            limit_req_status           500;
            limit_req_log_level        warn;
            limit_req                  zone=one [burst=3 nodelay];
        }
    }

    # access module config
    server {
        server_name                     access.hubby.top;

        root                            html/;
        error_log                       logs/accesserror.log info;

        location ~ /\.ht {
            # 遇到一个就结束
            allow                       127.0.0.1;
            deny                        all;
        }
    }

    # auth_basic module config
    server {
        server_name                     auth_basic.hubby.top;

        root                            html/;
        error_log                       logs/auth_basicerror.log info;

        location ~(.*)\.avi$ {
           auth_basic                   "website name";
           auth_basic_user_file         users; # /conf/users
           # yum install httpd -y
           # htpasswd -c -d /usr/local/users zhangsan
        }
    }

    # mirrors module config
    server {
        server_name                     mirrors.hubby.top;

        root                            html/;
        error_log                       logs/mirrorerror.log info;

        location / {
           mirror                       /mirror;
           mirror_request_body          off;
        }

        location = /mirror {
            internal;
            proxy_pass                  http://127.0.0.1:12345$request_uri;
            proxy_pass_request_body     off;
            proxy_set_header            Contennt-Length "";
            proxy_set_header            X-Original-URI $request_uri;
        }
    }

    server {
        # listen       127.0.0.1:80; # 自能本机访问
        listen       80;
        server_name  localhost;

        #charset koi8-r;
        access_log  logs/host.access.log  main;

        # LOAD_BALANCE
        location / {
            #需要转发请求的服务器  负载均衡也是如此配置
            proxy_pass   http://LOAD_BALANCE_SERVER_NAME;

            # keepalive
            proxy_http_version 1.1;
            # 默认是关闭的
            proxy_set_header Connection "";

            # nginx 接受完 body 之后才与 upstream 建立连接: upstream 与 nginx 是局域网
            proxy_request_buffering  on;
            # nginx 接受完 upstream 的 res body 之后才发送给客户端
            proxy_buffering  on;

            #Proxy Settings
            #是否跳转
            proxy_redirect     off;
            #请求要转发的host
            proxy_set_header   Host             $host;
            #请求的远程地址 这些在浏览器的header都可看, 不一一解释
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;

            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            #连接前面的服务器超时时间
            proxy_connect_timeout      90s;
            #请求转发数据报文的超时时间
            proxy_send_timeout         90s;

            # 接收 upstream 响应
            #读取超时时间
            proxy_read_timeout         90s;
            # 接收文件最大值: 0 不限制
            proxy_max_temp_file_size 0;
            # 每次想磁盘文件写的字节数; 高负荷下缓冲大小(proxy_buffers*2)
            proxy_temp_file_write_size 64k;
            # 缓冲区的大小
            proxy_buffer_size          4k;
            proxy_buffers              4 32k;
            # 临时文件到达 64k 时及时向客户端响应
            proxy_busy_buffers_size    64k;
        }

        error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        location ~ \.php$ {
           proxy_pass   http://127.0.0.1;
        }

        location ~ /image/ {
           root           html;
           # 自动展示目录列表
           autoindex      on;
           # 限制大文件的下载, 已达到更多的用户响应
           set $limit_rate 1k; # 每秒响应 1k 数据
        }



        # cors sample
        location /cors {
            # 枚举列出允许跨域的domian(可以使用NG支持的匹配方式)
            set $cors_origin "";
            if ($http_origin ~* "^http://foo.baidu.com$") {
                    set $cors_origin $http_origin;
            }
            if ($http_origin ~* "^http://bar.baidu.com$") {
                    set $cors_origin $http_origin;
            }
            add_header Access-Control-Allow-Origin $cors_origin;
        }


    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    server {
       listen       8000;
       listen       somename:8080;
       server_name  somename  alias  another.alias;

       location / {
           root   html;
           index  index.html index.htm;
       }
    }

    # https://user-images.githubusercontent.com/42330329/154804363-4ee6a6e9-0378-479f-ba6b-9f55f6aeef2d.png
    # HTTPS server
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
